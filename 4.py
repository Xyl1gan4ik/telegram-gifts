import logging
import asyncio
import time
import json
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.exceptions import TelegramBadRequest # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

import httpx
import curl_cffi

import config
import db

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ Aiogram
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞)
# –í —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ–º –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î + –≤—Ä–µ–º–µ–Ω–Ω—ã–π notified_ids
user_settings = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é curl_cffi —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π Chrome
session = curl_cffi.Session(impersonate="chrome131")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ –±–æ—Ç–∞
bot_username: str = None # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_user_actual_settings(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –≤ –∫—ç—à–µ.
    """
    if user_id not in user_settings:
        user_settings[user_id] = db.get_user_prefs(user_id)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ notified_ids –≤—Å–µ–≥–¥–∞ set() –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
        if 'notified_ids' not in user_settings[user_id]:
            user_settings[user_id]['notified_ids'] = set()
    return user_settings[user_id]

def get_floor_price(name, model):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é (floor) —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ (–ø–æ –∏–º–µ–Ω–∏ –∏ –º–æ–¥–µ–ª–∏)
    —Å –ø–æ–º–æ—â—å—é API gifts3.tonnel.network/api/filterStats.
    """
    key = f"{name}_{model}"
    try:
        # –ö–ª—é—á –≤ payload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "authData", –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
        payload = {
            "authData": config.AUTH_DATA # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AUTH_DATA –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é curl_cffi session
        res = session.post(
            "https://gifts3.tonnel.network/api/filterStats",
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 OPR/112.0.0.0",
                "Accept": "*/*",
                "Accept-Language": "en-US,en;q=0.5",
                "Referer": "https://market.tonnel.network/",
                "Content-Type": "application/json", # –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º JSON —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                "Origin": "https://market.tonnel.network",
                "Connection": "keep-alive",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "cross-site",
                "Sec-GPC": "1",
                "Priority": "u=4",
            },
            json=payload, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON
            timeout=10, # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            verify=False # –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ HTTP –æ—Ç–≤–µ—Ç–∞
        if res.status_code != 200:
            logger.error("[ERROR] floorPrice: HTTP %s - %s", res.status_code, res.text)
            return None

        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        try:
            data = res.json()
        except json.JSONDecodeError:
            logger.warning("[WARN] floorPrice: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n%s", res.text[:500])
            return None

        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–º —Å –∫–ª—é—á–æ–º 'data',
        # –∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤–∏–¥–∞ "–ò–º—è–ü–æ–¥–∞—Ä–∫–∞_–ú–æ–¥–µ–ª—å–ü–æ–¥–∞—Ä–∫–∞"
        # –ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {"data": {"GiftName_ModelName": {"floorPrice": 123.45, ...}}}
        floor_data = data.get("data", {})
        return floor_data.get(key, {}).get("floorPrice")

    except Exception as e:
        logger.error("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ floor price –¥–ª—è %s_%s: %s", name, model, e)
        return None

# --- –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---

async def check_subscription_status(user_id: int, message_or_query: types.Message | types.CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –∏–Ω–∞—á–µ False.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.
    """
    if db.is_admin(user_id):
        return True

    end_date = db.get_subscription_end_date(user_id)
    if time.time() < end_date:
        return True
    else:
        current_settings = get_user_actual_settings(user_id)
        if current_settings['active']:
            current_settings['active'] = False
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î
            db.set_user_prefs(user_id, current_settings['min_profit'], current_settings['interval'], 
                              current_settings['price_range'][0], current_settings['price_range'][1], current_settings['active'])
            # –ï—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. "
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe."
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏—Å—Ç–µ–∫–ª–∞. –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", user_id)
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É/–∫–Ω–æ–ø–∫—É
            try:
                if isinstance(message_or_query, types.Message):
                    await message_or_query.reply(
                        "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe."
                    )
                elif isinstance(message_or_query, types.CallbackQuery):
                    await message_or_query.answer() # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
                    await message_or_query.message.edit_text(
                        "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe."
                    )
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ): {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ---

async def check_auctions_job():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_auctions_job.")
    
    while True: # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_user_ids = []
        conn = sqlite3.connect(db.DATABASE_NAME)
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö subscriptions –∏–ª–∏ user_prefs
        cursor.execute("SELECT user_id FROM subscriptions UNION SELECT user_id FROM user_prefs")
        for row in cursor.fetchall():
            all_user_ids.append(row[0])
        conn.close()

        if not all_user_ids:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(config.DEFAULT_INTERVAL) # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            continue

        active_users_for_check = []
        for user_id in all_user_ids:
            current_settings = get_user_actual_settings(user_id) # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î)

            is_user_admin = db.is_admin(user_id)
            end_date = db.get_subscription_end_date(user_id)
            has_active_subscription = time.time() < end_date

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –ò–õ–ò —É –Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–æ –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
            if is_user_admin or has_active_subscription:
                if not current_settings['active']: # –ï—Å–ª–∏ –≤ –∫—ç—à–µ/–ë–î —Å—Ç–æ–∏—Ç False, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω
                    current_settings['active'] = True # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
                    db.set_user_prefs(user_id, current_settings['min_profit'], current_settings['interval'], 
                                      current_settings['price_range'][0], current_settings['price_range'][1], True)
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º (–ø–æ–¥–ø–∏—Å–∫–∞/–∞–¥–º–∏–Ω).", user_id)
                active_users_for_check.append(user_id)
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ –Ω–µ –∞–¥–º–∏–Ω
                if current_settings['active']: # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    current_settings['active'] = False # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
                    db.set_user_prefs(user_id, current_settings['min_profit'], current_settings['interval'], 
                                      current_settings['price_range'][0], current_settings['price_range'][1], False)
                    try:
                        await bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe.")
                    except Exception as e:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –æ –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è –ø–æ–¥–ø–∏—Å–∫–µ: %s", user_id, e)
                    logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏—Å—Ç–µ–∫–ª–∞. –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", user_id)
                logger.debug("–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s. –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.", user_id)

        if not active_users_for_check:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(config.DEFAULT_INTERVAL) # –ñ–¥–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            continue

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ sleep
        intervals = [get_user_actual_settings(uid)['interval'] for uid in active_users_for_check]
        max_interval = max(intervals) if intervals else config.DEFAULT_INTERVAL


        for user_id in active_users_for_check:
            current_settings = get_user_actual_settings(user_id) # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            try:
                payload = {
                    "page": 1,
                    "limit": 30,
                    "sort": '{"auctionEndTime":1,"gift_id":-1}',
                    "filter": '{"auction_id":{"$exists":true},"status":"active","asset":"TON"}',
                    "price_range": None,
                    "ref": 0,
                    "user_auth": config.AUTH_DATA # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú config.AUTH_DATA
                }

                res = session.post(
                    "https://gifts3.tonnel.network/api/pageGifts",
                    headers={
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 OPR/112.0.0.0",
                        "Accept": "*/*",
                        "Accept-Language": "en-US,en;q=0.5",
                        "Referer": "https://market.tonnel.network/",
                        "Content-Type": "application/json",
                        "Origin": "https://market.tonnel.network",
                        "Connection": "keep-alive",
                        "Sec-Fetch-Dest": "empty",
                        "Sec-Fetch-Mode": "cors",
                        "Sec-Fetch-Site": "cross-site",
                        "Sec-GPC": "1",
                        "Priority": "u=4",
                    },
                    json=payload,
                    timeout=10,
                    verify=False # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú verify=False –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                )

                if res.status_code != 200:
                    logger.error("[ERROR] check_auctions_job (–¥–ª—è %s): HTTP %s - %s", user_id, res.status_code, res.text)
                    continue

                try:
                    data = res.json()
                except json.JSONDecodeError:
                    logger.warning("[WARN] check_auctions_job (–¥–ª—è %s): –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n%s", user_id, res.text[:500])
                    continue

                auctions = data if isinstance(data, list) else data.get('auctions', [])
                logger.info("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: %d", user_id, len(auctions))

                for gift in auctions:
                    gift_id = gift.get('gift_id')
                    if gift_id is None:
                        logger.warning("–û–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –±–µ–∑ gift_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, gift)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                    if gift_id in current_settings['notified_ids']:
                        continue

                    name = gift.get('name', 'N/A')
                    model = gift.get('model', 'N/A')
                    backdrop = gift.get('backdrop', 'N/A')
                    auction_data = gift.get('auction', {})
                    bid_history = auction_data.get('bidHistory', [])

                    bid = float(bid_history[-1]['amount']) if bid_history else float(auction_data.get('startingBid', 0))

                    end_time_raw = auction_data.get('auctionEndTime', '')
                    end_time = end_time_raw[:19].replace('T',' ') if end_time_raw else 'N/A'

                    gift_num = gift.get('gift_num', gift.get('gift_id', 'N/A'))

                    min_price_range, max_price_range = current_settings['price_range']
                    if not (min_price_range <= bid <= max_price_range):
                        logger.debug("–ê—É–∫—Ü–∏–æ–Ω %s (—Å—Ç–∞–≤–∫–∞ %.2f) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                                     gift_id, bid, current_settings['price_range'], user_id)
                        continue

                    min_price = get_floor_price(name, model)
                    if min_price is None:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å floor price –¥–ª—è %s_%s. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s.", name, model, gift_id, user_id)
                        continue
                    
                    floor_with_markup = min_price * 1.06
                    after_commission = floor_with_markup * 0.9
                    profit = after_commission - bid
                    percent = (profit / bid) * 100 if bid > 0 else -100

                    if percent < current_settings['min_profit']:
                        logger.debug("–ê—É–∫—Ü–∏–æ–Ω %s (–ø—Ä–∏–±—ã–ª—å %.1f%%) –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ %d%% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                                    gift_id, percent, current_settings['min_profit'], user_id)
                        continue

                    gift_link = f"https://t.me/tonnel_network_bot/gift?startapp={gift_num}" if gift_num != 'N/A' else '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'

                    message_text = (
                        f"üéÅ–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                        f"–ú–æ–¥–µ–ª—å: {model}\n"
                        f"–§–æ–Ω: {backdrop}\n"
                        f"‚è≥–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {end_time}\n"
                        f"üí∞–°—Ç–∞–≤–∫–∞: {bid:.2f} TON\n"
                        f"Tonnel Floor: {min_price:.2f} TON\n"
                        f"üíµ–ü—Ä–∏–±—ã–ª—å: +{percent:.1f}% ({profit:.2f} TON)\n"
                        f"üîó–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {gift_link}"
                    )

                    await bot.send_message(chat_id=user_id, text=message_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π 'bot'
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ %s (–ø—Ä–∏–±—ã–ª—å %.1f%%) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", gift_id, percent, user_id)
                    current_settings['notified_ids'].add(gift_id)

            except Exception as e:
                logger.error("[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_auctions_job –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e)
        
        await asyncio.sleep(max_interval) # –ñ–¥–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        max_interval = config.DEFAULT_INTERVAL
        if active_users_for_check:
            for user_id in active_users_for_check:
                settings = get_user_actual_settings(user_id)
                max_interval = max(max_interval, settings['interval'])
        else:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %d —Å–µ–∫.", max_interval)

        await asyncio.sleep(max_interval) # –ñ–¥–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ö–æ–º–∞–Ω–¥—ã Telegram (Aiogram) ---

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    user_id = message.from_user.id
    username = message.from_user.username  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
    db.save_user(user_id, username)   
    user_prefs = get_user_actual_settings(user_id)

    if db.is_admin(user_id):
        user_prefs['active'] = True
        db.set_user_prefs(user_id, user_prefs['min_profit'], user_prefs['interval'], user_prefs['price_range'][0], user_prefs['price_range'][1], True)
        await message.reply("–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤–∞—Å.")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ê–¥–º–∏–Ω–∞ %s", user_id)
        return

    end_date = db.get_subscription_end_date(user_id)
    if time.time() < end_date:
        user_prefs['active'] = True
        db.set_user_prefs(user_id, user_prefs['min_profit'], user_prefs['interval'], user_prefs['price_range'][0], user_prefs['price_range'][1], True)
        await message.reply(
            f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫–∞–∂–¥—ã–µ {user_prefs['interval']} —Å–µ–∫.\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {time.ctime(end_date)}"
        )
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
    else:
        user_prefs['active'] = False # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
        db.set_user_prefs(user_id, user_prefs['min_profit'], user_prefs['interval'], user_prefs['price_range'][0], user_prefs['price_range'][1], False)
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞."
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.", user_id)


@dp.message(Command("stop"))
async def stop_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö ID.
    """
    user_id = message.from_user.id
    current_settings = get_user_actual_settings(user_id)

    if not db.is_admin(user_id):
        end_date = db.get_subscription_end_date(user_id)
        if time.time() > end_date:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

    current_settings['active'] = False
    current_settings['notified_ids'].clear()
    db.set_user_prefs(user_id, current_settings['min_profit'], current_settings['interval'], current_settings['price_range'][0], current_settings['price_range'][1], False) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ active
    await message.reply("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)

@dp.message(Command("settings"))
async def settings_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    current_settings = get_user_actual_settings(user_id)

    if not await check_subscription_status(user_id, message): # –ü–µ—Ä–µ–¥–∞–µ–º message –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        return

    status = "–∞–∫—Ç–∏–≤–µ–Ω" if current_settings['active'] else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    end_date = db.get_subscription_end_date(user_id)
    sub_status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {time.ctime(end_date)}" if end_date > time.time() else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

    msg_text = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_settings['interval']} —Å–µ–∫—É–Ω–¥\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {current_settings['min_profit']}%\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: –æ—Ç {current_settings['price_range'][0]} –¥–æ {current_settings['price_range'][1]} TON\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"/setprofit <–ø—Ä–æ—Ü–µ–Ω—Ç>\n"
        f"/setinterval <—Å–µ–∫—É–Ω–¥—ã>\n"
        f"/setpricerange <–º–∏–Ω_—Ç–æ–Ω> <–º–∞–∫—Å_—Ç–æ–Ω>"
    )
    await message.reply(msg_text)
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", user_id)

@dp.message(Command("setprofit"))
async def set_profit_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setprofit. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏.
    """
    user_id = message.from_user.id
    if not await check_subscription_status(user_id, message):
        return

    args = message.text.split()[1:]
    if not args or not args[0].isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏. –ü—Ä–∏–º–µ—Ä: /setprofit 7")
        return
    try:
        profit = int(args[0])
        if profit < 0:
            await message.reply("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        current_settings = get_user_actual_settings(user_id)
        current_settings['min_profit'] = profit
        db.set_user_prefs(user_id, profit, current_settings['interval'], current_settings['price_range'][0], current_settings['price_range'][1], current_settings['active'])
        await message.reply(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {profit}%.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∏–Ω. –ø—Ä–∏–±—ã–ª—å: %d%%", user_id, profit)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@dp.message(Command("setinterval"))
async def set_interval_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setinterval. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
    """
    user_id = message.from_user.id
    if not await check_subscription_status(user_id, message):
        return

    args = message.text.split()[1:]
    if not args or not args[0].isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ü—Ä–∏–º–µ—Ä: /setinterval 60")
        return
    try:
        interval = int(args[0])
        if interval < 5:
            await message.reply("–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥.")
            return
        current_settings = get_user_actual_settings(user_id)
        current_settings['interval'] = interval
        db.set_user_prefs(user_id, current_settings['min_profit'], interval, current_settings['price_range'][0], current_settings['price_range'][1], current_settings['active'])
        await message.reply(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª: %d —Å–µ–∫.", user_id, interval)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@dp.message(Command("setpricerange"))
async def set_price_range_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setpricerange. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Å—Ç–∞–≤–æ–∫.
    """
    user_id = message.from_user.id
    if not await check_subscription_status(user_id, message):
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not all(arg.replace('.', '', 1).isdigit() for arg in args):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /setpricerange 10 50")
        return
    try:
        min_price = float(args[0])
        max_price = float(args[1])
        if min_price < 0 or max_price < min_price:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.")
            return
        current_settings = get_user_actual_settings(user_id)
        current_settings['price_range'] = (min_price, max_price)
        db.set_user_prefs(user_id, current_settings['min_profit'], current_settings['interval'], min_price, max_price, current_settings['active'])
        await message.reply(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Ç {min_price} –¥–æ {max_price} TON.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: %.2f-%.2f TON", user_id, min_price, max_price)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞.")

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–æ–∫ (Aiogram) ---

@dp.message(Command("subscribe"))
async def subscribe_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
    """
    user_id = message.from_user.id
    end_date = db.get_subscription_end_date(user_id)
    if end_date > time.time():
        await message.reply(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {time.ctime(end_date)}.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars ‚≠ê", callback_data="choose_payment_stars")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot üí∞", callback_data="choose_payment_cryptobot")],
    ])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("choose_payment_"))
async def handle_payment_choice_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
    """
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    user_id = callback_query.from_user.id
    data = callback_query.data # –ù–∞–ø—Ä–∏–º–µ—Ä: "choose_payment_stars"

    if data == "choose_payment_stars":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['24h']['name_ru']} ({config.SUBSCRIPTION_PRICES['24h']['stars']} ‚≠ê)", callback_data="sub_24h_stars")],
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['7days']['name_ru']} ({config.SUBSCRIPTION_PRICES['7days']['stars']} ‚≠ê)", callback_data="sub_7days_stars")],
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['1month']['name_ru']} ({config.SUBSCRIPTION_PRICES['1month']['stars']} ‚≠ê)", callback_data="sub_1month_stars")],
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ (Telegram Stars):", reply_markup=keyboard)
    elif data == "choose_payment_cryptobot":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['24h']['name_ru']} ({config.SUBSCRIPTION_PRICES['24h']['usd']}$)", callback_data="sub_24h_cryptobot")],
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['7days']['name_ru']} ({config.SUBSCRIPTION_PRICES['7days']['usd']}$)", callback_data="sub_7days_cryptobot")],
            [InlineKeyboardButton(text=f"{config.SUBSCRIPTION_PRICES['1month']['name_ru']} ({config.SUBSCRIPTION_PRICES['1month']['usd']}$)", callback_data="sub_1month_cryptobot")],
        ])
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ (CryptoBot):", reply_markup=keyboard)

@dp.message(Command("give"))
async def give_command(message: types.Message):
    user_id = message.from_user.id
    if not db.is_admin(user_id):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /give @username")
        return

    username = args[1][1:]
    tg_id = db.get_user_id_by_username(username)
    if not tg_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    await message.reply(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /give —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {tg_id}).")
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏ —Ç.–ø.


@dp.callback_query(F.data.startswith("sub_"))
async def handle_subscription_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–∏–æ–¥ + –º–µ—Ç–æ–¥).
    """
    await callback_query.answer()
    user_id = callback_query.from_user.id
    data = callback_query.data # –ù–∞–ø—Ä–∏–º–µ—Ä: "sub_24h_stars" –∏–ª–∏ "sub_7days_cryptobot"

    parts = data.split('_')
    if len(parts) != 3 or parts[0] != "sub":
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: %s", data)
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    period = parts[1]
    payment_method = parts[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏–π –∏–Ω–≤–æ–π—Å
    end_date = db.get_subscription_end_date(user_id)
    if time.time() < end_date:
        await callback_query.message.edit_text(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {time.ctime(end_date)}.")
        return

    if payment_method == "stars":
        price_stars = config.SUBSCRIPTION_PRICES[period]["stars"]
        period_name_ru = config.SUBSCRIPTION_PRICES[period]["name_ru"]

        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name_ru}"
        description = f"–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –Ω–∞ {period_name_ru}."
        payload = f"{user_id}_{period}_stars_invoice"

        try:
            # –î–ª—è Telegram Stars provider_token - —ç—Ç–æ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            await bot.send_invoice(
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                provider_token=config.TELEGRAM_BOT_TOKEN, # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                currency="XTR", # –í–∞–ª—é—Ç–∞ Telegram Stars
                prices=[LabeledPrice(label="–°—Ç–æ–∏–º–æ—Å—Ç—å", amount=int(price_stars * 100))], # –¶–µ–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (100 –¥–ª—è Stars)
                is_flexible=False, # Stars –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≥–∏–±–∫–∏–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
            )
            await callback_query.message.edit_text(f"–ò–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars –Ω–∞ {period_name_ru} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.")
            logger.info("–ò–Ω–≤–æ–π—Å Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ %s", user_id, period)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞ Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å Telegram Stars. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    elif payment_method == "cryptobot":
        price_usd = config.SUBSCRIPTION_PRICES[period]["usd"]
        await create_cryptobot_invoice(user_id, period, price_usd, callback_query.message)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ CryptoBot –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ create_cryptobot_invoice
        await callback_query.message.edit_text(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ CryptoBot –¥–ª—è {config.SUBSCRIPTION_PRICES[period]['name_ru']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É.")


@dp.pre_checkout_query()
async def pre_checkout_callback(pre_checkout_query: types.PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Telegram Stars.
    """
    payload_parts = pre_checkout_query.invoice_payload.split('_')
    # –û–∂–∏–¥–∞–µ–º payload –≤ —Ñ–æ—Ä–º–∞—Ç–µ user_id_period_stars_invoice
    if len(payload_parts) == 4 and payload_parts[3] == "invoice" and payload_parts[2] == "stars":
        user_id = int(payload_parts[0])
        end_date = db.get_subscription_end_date(user_id)
        if time.time() < end_date:
            await pre_checkout_query.answer(ok=False, error_message="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        else:
            await pre_checkout_query.answer(ok=True)
    else:
        await pre_checkout_query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–æ–π.")
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π payload –≤ pre_checkout_query: %s", pre_checkout_query.invoice_payload)


@dp.message(F.successful_payment)
async def successful_payment_callback(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Telegram Stars.
    """
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload
    payload_parts = payload.split('_')

    # –û–∂–∏–¥–∞–µ–º payload –≤ —Ñ–æ—Ä–º–∞—Ç–µ user_id_period_stars_invoice
    if len(payload_parts) == 4 and payload_parts[3] == "invoice" and payload_parts[2] == "stars":
        period = payload_parts[1]
        
        duration_seconds = 0
        if period == "24h":
            duration_seconds = 24 * 3600
        elif period == "7days":
            duration_seconds = 7 * 24 * 3600
        elif period == "1month":
            duration_seconds = 30 * 24 * 3600

        current_end_date = db.get_subscription_end_date(user_id)
        if current_end_date > time.time():
            new_end_date = current_end_date + duration_seconds
        else:
            new_end_date = time.time() + duration_seconds

        db.set_subscription_end_date(user_id, new_end_date)
        period_name_ru = config.SUBSCRIPTION_PRICES[period]["name_ru"]

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ –∏ –ë–î
        user_prefs = get_user_actual_settings(user_id)
        user_prefs['active'] = True
        db.set_user_prefs(user_id, user_prefs['min_profit'], user_prefs['interval'], user_prefs['price_range'][0], user_prefs['price_range'][1], True)

        await message.reply(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name_ru} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {time.ctime(new_end_date)}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
        )
        logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —á–µ—Ä–µ–∑ Telegram Stars (–ü–µ—Ä–∏–æ–¥: %s)", user_id, period)
    else:
        logger.warning("–ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º payload: %s", payload)
        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û–¥–Ω–∞–∫–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# --- CryptoBot —Ñ—É–Ω–∫—Ü–∏–∏ (Aiogram) ---

async def create_cryptobot_invoice(user_id: int, period: str, amount_usd: float, message_object: types.Message):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot API.
    """
    global bot_username # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ username –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    if bot_username is None:
        try:
            me = await bot.get_me()
            bot_username = me.username
            logger.info("–ü–æ–ª—É—á–µ–Ω username –±–æ—Ç–∞: %s", bot_username)
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞: %s", e)
            await message_object.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

    period_name_ru = config.SUBSCRIPTION_PRICES[period]["name_ru"]
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name_ru}."
    payload = f"{user_id}_{period}_cryptobot"

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{config.CRYPTOBOT_API_URL}/createInvoice",
                headers={"Crypto-Pay-API-Token": config.CRYPTOBOT_API_TOKEN},
                json={
                    "asset": "USDT",
                    "amount": amount_usd,
                    "description": description,
                    "payload": payload,
                    "currency_type": "fiat",
                    "fiat": "USD",
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot_username
                    "url": f"https://t.me/{bot_username}?start={payload}"
                },
                timeout=10
            )
            response.raise_for_status()
            invoice_data = response.json()

            if invoice_data.get("ok") and invoice_data["result"]:
                invoice_url = invoice_data["result"]["pay_url"]
                invoice_id = invoice_data["result"]["invoice_id"]
                await message_object.answer( # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_object –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    text=(
                        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period_name_ru} ({amount_usd}$) "
                        f"—á–µ—Ä–µ–∑ CryptoBot –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{invoice_url}\n\n"
                        "–Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                    )
                )
                logger.info("CryptoBot –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, invoice_url)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                scheduler.add_job(
                    check_cryptobot_invoice_status,
                    IntervalTrigger(seconds=60), # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    args=[user_id, invoice_id, period],
                    id=f"check_crypto_invoice_{invoice_id}",
                    misfire_grace_time=30 # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–ø—É—Å–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫
                )
                
            else:
                await message_object.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å CryptoBot. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CryptoBot –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, invoice_data)

    except httpx.HTTPStatusError as e:
        logger.error("HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CryptoBot –∏–Ω–≤–æ–π—Å–∞: %s", e)
        await message_object.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ (HTTP).")
    except httpx.RequestError as e:
        logger.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CryptoBot –∏–Ω–≤–æ–π—Å–∞: %s", e)
        await message_object.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞.")
    except Exception as e:
        logger.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CryptoBot –∏–Ω–≤–æ–π—Å–∞: %s", e)
        await message_object.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞.")

async def check_cryptobot_invoice_status(user_id: int, invoice_id: str, period: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ CryptoBot.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º APScheduler.
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{config.CRYPTOBOT_API_URL}/getInvoices",
                headers={"Crypto-Pay-API-Token": config.CRYPTOBOT_API_TOKEN},
                params={"invoice_ids": invoice_id},
                timeout=10
            )
            response.raise_for_status()
            invoice_status_data = response.json()

            if invoice_status_data.get("ok") and invoice_status_data["result"] and invoice_status_data["result"]["items"]:
                invoice = invoice_status_data["result"]["items"][0]
                if invoice["status"] == "paid":
                    duration_seconds = 0
                    if period == "24h":
                        duration_seconds = 24 * 3600
                    elif period == "7days":
                        duration_seconds = 7 * 24 * 3600
                    elif period == "1month":
                        duration_seconds = 30 * 24 * 3600

                    current_end_date = db.get_subscription_end_date(user_id)
                    if current_end_date > time.time():
                        new_end_date = current_end_date + duration_seconds
                    else:
                        new_end_date = time.time() + duration_seconds

                    db.set_subscription_end_date(user_id, new_end_date)
                    period_name_ru = config.SUBSCRIPTION_PRICES[period]["name_ru"]

                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ –∏ –ë–î
                    user_prefs = get_user_actual_settings(user_id)
                    user_prefs['active'] = True
                    db.set_user_prefs(user_id, user_prefs['min_profit'], user_prefs['interval'], user_prefs['price_range'][0], user_prefs['price_range'][1], True)

                    await bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name_ru} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ CryptoBot.\n"
                            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {time.ctime(new_end_date)}\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
                        )
                    )
                    logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —á–µ—Ä–µ–∑ CryptoBot (–ò–Ω–≤–æ–π—Å ID: %s, –ü–µ—Ä–∏–æ–¥: %s)", user_id, invoice_id, period)
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —Ç.–∫. –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞
                    scheduler.remove_job(f"check_crypto_invoice_{invoice_id}")

                elif invoice["status"] == "active":
                    logger.debug("–ò–Ω–≤–æ–π—Å CryptoBot %s –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫.", invoice_id, user_id)
                    # –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è APScheduler'–æ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–∞
                else:
                    await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –∏–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
                    logger.warning("–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ CryptoBot %s: %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", invoice_id, invoice["status"], user_id)
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                    scheduler.remove_job(f"check_crypto_invoice_{invoice_id}")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ CryptoBot –¥–ª—è %s: %s", invoice_id, invoice_status_data)
                await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ CryptoBot. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                scheduler.remove_job(f"check_crypto_invoice_{invoice_id}") # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É

    except httpx.HTTPStatusError as e:
        logger.error("HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞ CryptoBot: %s", e)
    except httpx.RequestError as e:
        logger.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞ CryptoBot: %s", e)
    except Exception as e:
        logger.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞ CryptoBot: %s", e)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è Telegram-–±–æ—Ç–∞.
    """
    global bot_username # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    db.init_db()
    db.set_admin_status(config.TELEGRAM_USER_ID, True)
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", config.TELEGRAM_USER_ID)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        me = await bot.get_me()
        bot_username = me.username
        logger.info("Username –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: %s", bot_username)
    except Exception as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ! %s", e)
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å username, —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –≤—ã—Ö–æ–¥–∏–º
        import sys
        sys.exit(1) # –í—ã—Ö–æ–¥ —Å –æ—à–∏–±–∫–æ–π

    # –ó–∞–ø—É—Å–∫–∞–µ–º APScheduler
    scheduler.start()
    logger.info("APScheduler –∑–∞–ø—É—â–µ–Ω.")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∫–∞–∫ —á–∞—Å—Ç—å loop'–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        # –û–Ω–∞ —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º —á–µ—Ä–µ–∑ asyncio.sleep
        asyncio.create_task(check_auctions_job())
        await dp.start_polling(bot) # –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await bot.session.close()
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. APScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ `main` —É–∂–µ –∫–æ—Ä—É—Ç–∏–Ω–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e)